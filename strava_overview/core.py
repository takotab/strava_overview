# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['MyServer', 'Handel', 'start_handel', 'UseCode', 'GetActivities', 'GetStreams', 'DataFrame', 'ParseActivity',
           'calctime', 'split_lat', 'split_long', 'concatdf']

# Cell
import json


# Cell
import http.server

class MyServer(http.server.BaseHTTPRequestHandler):
  #Handle the web data sent from the strava API
    def do_HEAD(self):
        return self.do_GET()

    def do_GET(self):
        #Get the API code for Strava
#         self.wfile.write('<script>window.close();</script>')
        print(self.path)
        state = {o.split("=")[0]: o.split("=")[1] for o in self.path.split("&")}
        code = state["code"]
        json.dump(state,open('auth_token.json','w'))

# Cell
import stravalib
import urllib.parse
import webbrowser
import os
# import pandas as pd
# import datetime

# Cell
class Handel:
    def __init__(self,client_id, secret, port = 5000, url = "http://localhost:xxport/authorized",types = [
            "time",
            "distance",
            "latlng",
            "altitude",
            "velocity_smooth",
            "moving",
            "grade_smooth",
            "temp",
            "watts",
            "cadence",
            "heartrate",
    ]
                ):
        # Create the strava client, and open the web browser for authentication
        self.client = stravalib.client.Client()
        self.url = url.replace('xxport',str(port))
        self.port = port
        self.authorize_url = self.client.authorization_url(client_id=client_id, redirect_uri=self.url)

    def start(self):
        print("Opening: %s" % self.authorize_url)
        webbrowser.open(self.authorize_url)

        try:
            httpd = http.server.HTTPServer(("localhost", self.port), MyServer)
            httpd.handle_request()
            httpd.server_close()

        except KeyboardInterrupt:
            # Allow ^C to interrupt from any thread.
            sys.stdout.write("\033[0m")
            sys.stdout.write("User Interupt\n")
        if os.isfile('auth_token.json'):
            print('succes')


# Cell
def start_handel(client_id, secret):


    # Create the strava client, and open the web browser for authentication
    client = stravalib.client.Client()
    authorize_url = client.authorization_url(client_id=client_id, redirect_uri=url)
    print("Opening: %s" % authorize_url)
    webbrowser.open(authorize_url)

# Cell
# Define the web functions to call from the strava API
def UseCode(code):
    # Retrieve the login code from the Strava server
    print(client_id.__repr__(), secret.__repr__(), code.__repr__())
    access_token = client.exchange_code_for_token(
        client_id=client_id, client_secret=secret, code=code
    )
    # Now store that access token somewhere (for now, it's just a local variable)
    print(access_token)
    client.access_token = access_token["access_token"]
    athlete = client.get_athlete()
    print(
        (
            "For %(id)s, I now have an access token %(token)s"
            % {"id": athlete.id, "token": access_token}
        )
    )
    return client


def GetActivities(client, limit):
    # Returns a list of Strava activity objects, up to the number specified by limit
    activities = client.get_activities(limit=limit)
    assert len(list(activities)) == limit
    for item in activities:
        print(item)
    return activities


def GetStreams(client, activity, types):
    # Returns a Strava 'stream', which is timeseries data from an activity
    streams = client.get_activity_streams(activity, types=types, series_type="time")
    return streams


def DataFrame(dict, types):
    # Converts a Stream into a dataframe, and returns the dataframe
    print(dict, types)
    df = pd.DataFrame()
    for item in types:
        if item in list(dict.keys()):
            df.append(item.data)
    df.fillna("", inplace=True)
    return df


def ParseActivity(act, types):
    act_id = act.id
    name = act.name
    print(str(act_id), str(act.name), act.start_date)
    streams = GetStreams(client, act_id, types)
    df = pd.DataFrame()

    # Write each row to a dataframe
    for item in types:
        if item in list(streams.keys()):
            df[item] = pd.Series(streams[item].data, index=None)
        df["act_id"] = act.id
        df["act_startDate"] = pd.to_datetime(act.start_date)
        df["act_name"] = name
    return df


def calctime(time_sec, startdate):
    try:
        timestamp = startdate + datetime.timedelta(seconds=int(time_sec))
    except:
        print("time processing error : " + str(time_sec))
        timestamp = startdate
    return timestamp


def split_lat(series):
    lat = series[0]
    return lat


def split_long(series):
    long = series[1]
    return int


def concatdf(df_lst):
    return pd.concat(df_lst, ignore_index=False)

