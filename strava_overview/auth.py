# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_auth.ipynb (unless otherwise specified).

__all__ = ['characters', 'characters', 'InvalidToken', 'Tokens', 'tokens', 'go_strava_auth']

# Cell
from .imports import *
import pandas as pd
import string
import random
from pynamodb.models import Model
from pynamodb.attributes import (
    UnicodeAttribute, NumberAttribute, UnicodeSetAttribute, UTCDateTimeAttribute, BooleanAttribute, MapAttribute, ListAttribute,
)

# Cell
characters = string.ascii_uppercase + "".join([str(i) for i in range(10)])
characters = characters.replace('I','').replace('0','').replace('O','').replace('L','').replace('1','')

# Cell
class InvalidToken(Exception):pass

class Tokens(Model):
    """
    This class represents a global secondary index
    """
    class Meta:
        table_name = "motionreview-tokens"
        region = 'eu-central-1'
        read_capacity_units = 1
        write_capacity_units = 1
    token = UnicodeAttribute(hash_key=True)
    id = UnicodeAttribute()
    used = BooleanAttribute(default = False)
    time_made = UTCDateTimeAttribute()

    @classmethod
    def add(cls, id):
        exists = True
        while exists:
            token = "".join([random.choice(characters) for _ in range(6)])
            exists = not len(tokens(token))== 0
            print(token)
        c= cls(token, id = str(id), time_made = pd.Timestamp.now())
        c.save()
        return c, token

    @classmethod
    def done(cls, token):
        tok = list(Tokens.query(str(token)))
        print(tok)
        if len(tok)==0:
            raise InvalidToken()
        elif len(tok) > 1:
            raise Exception()
        if tok[0].used:
            raise Exception()
        tok[0].used = True
        tok[0].save()
        return tok[0].id

def tokens(token):
    return list(Tokens.query(token))

# Cell
import os
import stravalib
import webbrowser

def go_strava_auth(client:stravalib.client.Client):
    """Excecuted by the front-end to start an auth request."""
    host = os.getenv("host")
    url = 'http://' +host+ ':8080/authorized'
    authorize_url = client.authorization_url(
        client_id=client_id, redirect_uri=url, scope="activity:read_all"
    )
    webbrowser.open(authorize_url)